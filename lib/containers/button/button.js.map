{"version":3,"sources":["../../../develop/src/containers/button/button.js"],"names":["Button","childElements","Children","forEach","props","children","item","element","styles","textButton","textStyle","size","text","theme","allowFontScaling","push","isValidElement","isLoading","spinner","activityIndicatorColor","_renderChildren","nextProps","nextState","isDisabled","button","style","disabledStyle","opacity","_renderInnerText","touchableProps","accessibilityLabel","onPress","onPressIn","onPressOut","onLongPress","activeOpacity","delayLongPress","delayPressIn","delayPressOut","isAndroid","background","SelectableBackground","color","OS","propTypes","oneOfType","string","node","number","bool","func","any","defaultProps","create","height","flexDirection","alignItems","borderWidth","borderRadius","marginBottom","alignSelf","justifyContent","flex","fontSize","textAlign","backgroundColor"],"mappings":"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","file":"button.js","sourcesContent":["//import liraries\nimport React, { Component, PropTypes } from 'react';\nimport {\n  View,\n  TouchableOpacity,\n  Text,\n  StyleSheet,\n  ActivityIndicator,\n  TouchableNativeFeedback,\n  Platform\n} from 'react-native';\nimport isEqual from 'lodash.isequal';\nimport { buttonSize } from '../../themes/button';\n\nclass Button extends Component {\n\n  static isAndroid = Platform.OS === 'android'\n\n  static propTypes = {\n    textStyle: Text.propTypes.style,\n    disabledStyle: Text.propTypes.style,\n    children: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.node,\n      PropTypes.element\n    ]),\n    accessibilityLabel: PropTypes.string,\n    activeOpacity: PropTypes.number,\n    allowFontScaling: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    isDisabled: PropTypes.bool,\n    activityIndicatorColor: PropTypes.string,\n    delayLongPress: PropTypes.number,\n    delayPressIn: PropTypes.number,\n    delayPressOut: PropTypes.number,\n    onPress: PropTypes.func,\n    onLongPress: PropTypes.func,\n    onPressIn: PropTypes.func,\n    onPressOut: PropTypes.func,\n    background: (TouchableNativeFeedback.propTypes) ? TouchableNativeFeedback.propTypes.background : PropTypes.any,\n  }\n\n  static defaultProps = {\n    theme: {},\n    size: 'lg'\n  }\n\n  _renderChildren() {\n    let childElements = [];\n    React.Children.forEach(this.props.children, (item) => {\n      if (typeof item === 'string' || typeof item === 'number') {\n        const element = (\n          <Text\n            style={[styles.textButton, this.props.textStyle, buttonSize[this.props.size].text, this.props.theme.text]}\n            allowFontScaling={this.props.allowFontScaling}\n            key={item}>\n            {item}\n          </Text>\n        );\n        childElements.push(element);\n      } else if (React.isValidElement(item)) {\n        childElements.push(item);\n      }\n    });\n    return (childElements);\n  }\n\n  _renderInnerText() {\n    if (this.props.isLoading) {\n      return (\n        <ActivityIndicator\n          animating={true}\n          size='small'\n          style={styles.spinner}\n          color={this.props.activityIndicatorColor || 'black'}\n        />\n      );\n    }\n    return this._renderChildren();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (!isEqual(nextProps, this.props)) {\n      return true;\n    }\n    return false;\n  }\n\n  render() {\n    if (this.props.isDisabled === true || this.props.isLoading === true) {\n      return (\n        <View style={[styles.button, this.props.style, (this.props.disabledStyle || styles.opacity)]}>\n          {this._renderInnerText()}\n        </View>\n      );\n    }\n\n    // Extract Touchable props\n    let touchableProps = {\n      accessibilityLabel: this.props.accessibilityLabel,\n      onPress: this.props.onPress,\n      onPressIn: this.props.onPressIn,\n      onPressOut: this.props.onPressOut,\n      onLongPress: this.props.onLongPress,\n      activeOpacity: this.props.activeOpacity,\n      delayLongPress: this.props.delayLongPress,\n      delayPressIn: this.props.delayPressIn,\n      delayPressOut: this.props.delayPressOut,\n    };\n    \n    if (Button.isAndroid) {\n      touchableProps = Object.assign(touchableProps, {\n        background: this.props.background || TouchableNativeFeedback.SelectableBackground()\n      });\n      return (\n        <TouchableNativeFeedback {...touchableProps}>\n          <View style={[styles.button, this.props.style, buttonSize[this.props.size].button, this.props.theme.color]}>\n            {this._renderInnerText()}\n          </View>\n        </TouchableNativeFeedback>\n      )\n    } else {\n      return (\n        <TouchableOpacity {...touchableProps}\n          style={[styles.button, this.props.style, buttonSize[this.props.size].button, this.props.theme.color]}>\n          {this._renderInnerText()}\n        </TouchableOpacity>\n      );\n    }\n  }\n\n}\n\n// define your styles\nconst styles = StyleSheet.create({\n  button: {\n    height: 44,\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderRadius: 8,\n    marginBottom: 10,\n    alignSelf: 'stretch',\n    justifyContent: 'center',\n  },\n  textButton: {\n    flex: 1,\n    fontSize: 18,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n  },\n  spinner: {\n    alignSelf: 'center',\n  },\n  opacity: {\n    opacity: 0.5,\n  },\n});\n\n//make this component available to the app\nexport default Button;\n"]}